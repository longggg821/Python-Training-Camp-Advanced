name: Python Test Scoring and Reporting

on:
  push:
    branches: [ "main", "yololab" ]
  pull_request:
    branches: [ "main", "yololab" ]

  # 允许手动触发
  workflow_dispatch:
    inputs:
      reason:
        description: '运行原因'
        required: false
        default: '手动测试'

jobs:
  test:
    if: github.repository_owner != 'PythonTrainingCamp'
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}
      PIP_CACHE_DIR: $RUNNER_TEMP/pip-cache
      ENCODED_API_URL: "aHR0cHM6Ly9hcGkub3BlbmNhbXAuY24vd2ViL2FwaS9jb3Vyc2VSYW5rL2NyZWF0ZUJ5VGhpcmRUb2tlbg=="
      ENCODED_TOKEN: "ZDRjNzViMTJhNDZlNDMxZTlhY2FjZjM2YzA0ODJiMjk="

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Decode API URL and Token
        id: decode_vars
        run: |
          echo "DECODED_API_URL=$(printf '%s' "$ENCODED_API_URL" | base64 --decode)" >> $GITHUB_ENV
          echo "DECODED_TOKEN=$(printf '%s' "$ENCODED_TOKEN" | base64 --decode)" >> $GITHUB_ENV
          echo "::add-mask::$(printf '%s' "$ENCODED_TOKEN" | base64 --decode)"

      - name: Update apt sources
        run: |
          sudo apt update
          sudo apt install -y software-properties-common
          sudo add-apt-repository -y ppa:graphics-drivers/ppa
          sudo apt update

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          sudo apt-get update
          sudo apt-get install -y libgl1
          pip install -r requirements.txt

      - name: Debug environment
        run: |
          echo "当前工作目录:"
          pwd
          echo "目录内容:"
          ls -la
          echo "Python版本:"
          python --version
          echo "安装的包:"
          pip list
          echo "PYTHONPATH: $PYTHONPATH"
          echo "RUNNER_TEMP: $RUNNER_TEMP"

      - name: Run pytest tests
        continue-on-error: true
        id: pytest
        run: |
          python -m pytest tests/ -v --junitxml=test-results.xml

      - name: Run score calculator
        id: score_calculator
        run: |
          python score_calculator.py

      - name: Print test results score
        id: print_score
        run: |
          echo "测试分数报告内容:"
          cat test_score.txt
          echo "### 测试分数" >> $GITHUB_STEP_SUMMARY
          cat test_score.txt >> $GITHUB_STEP_SUMMARY

      - name: Send score to OpenCamp API
        env:
          COURSE_ID: 1800
        run: |
          echo "准备发送分数到 API..."
          if [ ! -f test_score.txt ]; then
            echo "错误：找不到分数文件 test_score.txt"
            exit 1
          fi

          LINE=$(sed -n '2p' test_score.txt)
          echo "Read second line from test_score.txt: $LINE"
          if [[ -z "$LINE" || ! "$LINE" == *"Score:"* ]]; then
            echo "错误：test_score.txt 第二行格式不正确或不存在。内容: '$LINE'"
            exit 1
          fi
          SCORE=$(echo "$LINE" | awk -F': ' '{print $2}' | tr -d '[:space:]')

          if ! [[ "$SCORE" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            echo "错误：从 test_score.txt 提取的分数无效: '$SCORE' (原始行: '$LINE')"
            exit 1
          fi

          echo "提取到的分数: $SCORE"
          echo "课程 ID: $COURSE_ID"
          echo "提交者: $GITHUB_ACTOR"
          echo "API 端点: $DECODED_API_URL"

          JSON_PAYLOAD=$(printf '{"channel": "github", "courseId": %d, "ext": "{}", "name": "%s", "score": %s, "totalScore": 100}' "$COURSE_ID" "$GITHUB_ACTOR" "$SCORE")

          echo "构造的 JSON (Token 已隐藏): $(printf '{"channel": "github", "courseId": %d, "ext": "{}", "name": "%s", "score": %s, "totalScore": 100}' "$COURSE_ID" "$GITHUB_ACTOR" "$SCORE")"

          # 添加调试输出 (如果需要可以保留，暂时注释掉)
          # echo "Debug URL Check: [$DECODED_API_URL]"
          # echo "Debug URL characters (od -tx1c):"
          # printf '%s' "$DECODED_API_URL" | od -tx1c
          # echo "Debug Token Check (first 5 chars): [${DECODED_TOKEN:0:5}...]"

          # 将 curl 命令放在单行，移除 '\' 续行符
          curl -X POST -H 'accept: application/json;charset=utf-8' -H 'Content-Type: application/json' -H "token: $DECODED_TOKEN" -d "$JSON_PAYLOAD" "$DECODED_API_URL" --fail --show-error

          echo "API 调用尝试完成。"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test_score.txt
            test-results.xml